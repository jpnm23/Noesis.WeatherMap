#pragma checksum "C:\Users\carmo\Documents\GitHub\Noesis.WeatherMap\Noesis.WeatherMap\Noesis.WeatherMap.Site\Views\Home\Favorite.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3b95c4cb63e01c81b5db1e45fcbc2463ef6a19dd"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Favorite), @"mvc.1.0.view", @"/Views/Home/Favorite.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\carmo\Documents\GitHub\Noesis.WeatherMap\Noesis.WeatherMap\Noesis.WeatherMap.Site\Views\_ViewImports.cshtml"
using Noesis.WeatherMap.Site;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\carmo\Documents\GitHub\Noesis.WeatherMap\Noesis.WeatherMap\Noesis.WeatherMap.Site\Views\_ViewImports.cshtml"
using Noesis.WeatherMap.Site.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3b95c4cb63e01c81b5db1e45fcbc2463ef6a19dd", @"/Views/Home/Favorite.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1a13a5eae9e013c9b47c0c514d10f8f75a61deea", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Favorite : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3b95c4cb63e01c81b5db1e45fcbc2463ef6a19dd3392", async() => {
                WriteLiteral(@"
    <title>Add Map</title>

    <style>
        /* Set the size of the div element that contains the map */
        #map {
            height: 400px;
            /* The height is 400 pixels */
            width: 100%;
            /* The width is the width of the web page */
        }
    </style>

    <script>
        function getParameter(parameterName) {
            let parameters = new URLSearchParams(window.location.search);
            return parameters.get(parameterName);
        }


    </script>

    <script src=""https://code.jquery.com/jquery-3.6.0.slim.js"" integrity=""sha256-HwWONEZrpuoh951cQD1ov2HUK5zA5DwJ1DNUXaM6FsY="" crossorigin=""anonymous""></script>


");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3b95c4cb63e01c81b5db1e45fcbc2463ef6a19dd5060", async() => {
                WriteLiteral(@"
    <div>
        <div class=""row"">
            <div class=""col-8"">
                <!--The div element for the map -->
                <div id=""map""></div>
            </div>
            <div class=""col-4"">
                <div class=""card"" style=""width: 18rem;"">
                    <div class=""card-header text-center"">
                        <label id=""lblCity""></label>
                        <label style=""display:none;"" id=""lblCountry""></label>
                    </div>
                    <div class=""card-body"">
                        <h5 class=""card-title""><label id=""lblDescription""></label></h5>
                        <p class=""card-text"">Temperatura: <label id=""lblTemp""></label>º C</p>
                        <p class=""card-text"">Real Feel: <label id=""lblFeelsLike""></label>º C</p>
                        <p class=""card-text"">Humidade: <label id=""lblHumidity""></label>%</p>
                        <p class=""card-text"">Vento: <label id=""lblWind""></label> km/h</p>
                 ");
                WriteLiteral(@"       <input type=""button"" id=""addFav"" class=""btn btn-primary"" value=""Guardar localização"" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Async script executes immediately and must be after any DOM elements used in callback. -->
    <script async defer src=""https://maps.googleapis.com/maps/api/js?key=AIzaSyB6YW0YWSkyDskcunewOJEGg572FOUL0SA&callback=initMap&libraries=&v=weekly""></script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
</html>

<script>

    let map;
    let markers = [];
    let coordinate;
    let favMarkers = [];

    // Initialize and add the map
    function initMap() {
        // The location of Uluru
        const uluru = { lat: 38.718994, lng: -9.144538 };
        // The map, centered at Uluru
        const map = new google.maps.Map(document.getElementById(""map""), {
            zoom: 12,
            center: uluru,
        });

        function SetMarkers(map) {

        $.ajax({
            url: ""/Home/GetUserFavorites?id="" + getParameter(""id""),
            type: ""GET"",
            dataType: ""json"",
            success: function (data) {
                var result = JSON.parse(data);

                const image = {
                    url: ""https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"",
                    // This marker is 20 pixels wide by 32 pixels high.
                    size: new google.maps.Size(20, 32),
                    ");
            WriteLiteral(@"// The origin for this image is (0, 0).
                    origin: new google.maps.Point(0, 0),
                    // The anchor for this image is the base of the flagpole at (0, 32).
                    anchor: new google.maps.Point(0, 32),
                  };

                for (let i = 0; i < result.length; i++) {
                    const fav = result[i];
                    let favMarker = new google.maps.Marker({
                      position: { lat: parseFloat(fav.latitude), lng: parseFloat(fav.longitude) },
                      map,
                      icon: image,
                      title: fav.city,
                    });
                    favMarkers.push(favMarker);
               }

            }
        });
    };

        SetMarkers(map);



        //add mark to map
        map.addListener('click',
            (event) => {
                deleteMarkers(null);
                addMarker({ coords: event.latLng });
            });

        function addM");
            WriteLiteral(@"arker(props) {
            // The marker, positioned at Uluru
            const marker = new google.maps.Marker({
                position: props.coords,
                map: map
            });
            markers.push(marker);
            coordinate = props.coords;
            getWeatherByMark();
            SetMarkers(map);

        }

        function deleteMarkers(map) {

            for (let i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }

            markers = [];
        };

         function deleteFavMarkers(city) {
            let map = null;

            for (let i = 0; i < favMarkers.length; i++) {
                favMarkers[i].setMap(map);
            }
            favMarkers = [];
        };

        function getWeatherByMark() {
            $.ajax({
                method: ""GET"",
                url: ""/Home/GetWeatherByMark?location="" + coordinate,
                success: function(data){
                    var result ");
            WriteLiteral(@"= JSON.parse(data);
                    console.log(result);
                    $(""#lblCity"").html(result.city);
                    $(""#lblDescription"").html(result.description);
                    $(""#lblTemp"").html(result.temp);
                    $(""#lblFeelsLike"").html(result.feelsLike);
                    $(""#lblHumidity"").html(result.humidity);
                    $(""#lblWind"").html(result.wind);
                    $(""#lblCountry"").html(result.country);
                },
            });
        };


        document.getElementById(""addFav"").addEventListener(""click"", function addFav() {

            console.log(favMarkers[0]);

                var favorites = {
                    longitude: coordinate.lng,
                    latitude: coordinate.lat,
                    city: $(""#lblCity"").html(),
                    country: $(""#lblCountry"").html(),
                    userId: getParameter(""id"")};
                $.ajax({
                url: ""/Home/AddUserFav"",
      ");
            WriteLiteral(@"          method: ""POST"",
                data: favorites,
                success: function (data) {
                    for (let i = 0; i <= favMarkers.length; i++) {
                        if(favMarkers[i].title == $(""#lblCity"").html()){
                            favMarkers[i].setMap(null);
                        }
                    };
                },
                });
                    }, false);

                     
    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
